# Types

# Executions

type Action @entity {
  id: ID!
  to: Bytes!
  value: BigInt!
  data: Bytes!
  dao: Dao!
  proposal: IProposal!
  execResult: Bytes
}

# Dao

type Dao @entity {
  id: ID! # use address as id
  actions: [Action!]! @derivedFrom(field: "dao")
  proposals: [IProposal!]! @derivedFrom(field: "dao")
  plugins: [Plugin!]! @derivedFrom(field: "dao")
  deposits: [PluginDeposit!]! @derivedFrom(field: "dao")
}

# Plugins

type PluginPreparation @entity(immutable: true) {
  # OSX related data
  id: ID! # psp setupId + installationId
  # Set plugin specific related data below:
  preparationData: Bytes
}

interface PluginInstallation @entity {
  # OSX related data
  id: ID! # psp installationId
  dao: Dao!

  # Set plugin specific related data below:
}

# Plugin

type Plugin implements PluginInstallation @entity {
  "OSX related data"
  id: ID! # psp installationId
  dao: Dao!

  "Set plugin specific related data below:"
  creationBlockNumber: BigInt!
  createdAt: BigInt
  xdcValidator: Bytes
  proposals: [PluginProposal!]! @derivedFrom(field: "plugin")
  deposits: [PluginDeposit!]! @derivedFrom(field: "plugin")
  judiciaries: [PluginJudiciary!]! @derivedFrom(field: "plugin")
  masterNodeDelegatees: [PluginMasterNodeDelegatee!]!
    @derivedFrom(field: "plugin")
}

type PluginMember @entity {
  id: ID! # plugin_address + member_address
  address: String # address as string to facilitate filtering by address on the UI
  proposals: [PluginProposalMember!]! @derivedFrom(field: "approver")
  plugin: Plugin!
}

type PluginProposalMember @entity(immutable: true) {
  "MemberProposal for Many-to-Many"
  id: ID! # approver + proposal
  approver: PluginMember!
  proposal: PluginProposal!
  createdAt: BigInt!
}

# Proposal
interface IProposal {
  id: ID! # package + proposalId
  dao: Dao!
  creator: Bytes!
  metadata: String
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  executed: Boolean!
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  executionTxHash: Bytes
}

type PluginProposal implements IProposal @entity {
  id: ID! # plugin + proposalId
  dao: Dao!
  actions: [Action!]! @derivedFrom(field: "proposal")
  allowFailureMap: BigInt!
  failureMap: BigInt
  plugin: Plugin!
  pluginProposalId: BigInt!
  creator: Bytes!
  metadata: String
  createdAt: BigInt!
  startDate: BigInt!
  endDate: BigInt!
  creationBlockNumber: BigInt!
  snapshotBlock: BigInt!
  executed: Boolean!
  executionDate: BigInt
  executionBlockNumber: BigInt
  executionTxHash: Bytes
}
type PluginDeposit @entity(immutable: true) {
  id: ID! # dao + block number
  voter: Bytes!
  amount: BigInt!
  snapshotBlock: BigInt!
  plugin: Plugin!
  dao: Dao!
  txHash: Bytes
  depositDate: BigInt
}
type PluginJudiciary @entity {
  id: ID! # pluginId + block number
  member: Bytes!
  snapshotBlock: BigInt
  plugin: Plugin!
  dao: Dao!
  txHash: Bytes
  action: BigInt!
  creationDate: BigInt
}
type PluginMasterNodeDelegatee @entity {
  id: ID! # pluginId + block number
  masterNode: Bytes!
  member: Bytes!
  action: BigInt!
  state: String
  snapshotBlock: BigInt
  plugin: Plugin!
  dao: Dao!
  txHash: Bytes
  creationDate: BigInt
  updatedDate: BigInt
}
